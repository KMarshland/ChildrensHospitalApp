//--------------------------------------//               PowerUI////        For documentation or //    if you have any issues, visit//        powerUI.kulestar.com////    Copyright © 2013 Kulestar Ltd//          www.kulestar.com//--------------------------------------using UnityEditor;using UnityEngine;using System.Threading;using System.IO;using Wrench;using System.Collections;using System.Collections.Generic;using UnityHttp;namespace PowerUI{		/// <summary>	/// Displays options for enabling Emoji. All this does is download a bunch of default graphics.	/// </summary>		public class EmojiSettings : EditorWindow{			/// <summary>The current decompression status. Emoji icons are received as a unitypackage, decompressed and then have import settings applied.</summary>		public static int Status;		/// <summary>Tracks refreshing of the window when a download is in progress.</summary>		public static int RefreshTimer;		/// <summary>True when a download is in progress.</summary>		public static bool IsDownloading;		/// <summary>A static reference to the currently open Emoji window, if there is one.</summary>		public static EditorWindow Window;		/// <summary>The latest download request.</summary>		private static HttpRequest Request;		/// <summary>The editable path that emoji icons will be saved in.</summary>		public static string DownloadPath="Resources/Characters/";				// Add menu item named "Emoji" to the PowerUI menu:		[MenuItem("Window/PowerUI/Emoji")]		public static void ShowWindow(){			Status=0;			IsDownloading=false;						// Show existing window instance. If one doesn't exist, make one.			Window=EditorWindow.GetWindow(typeof(EmojiSettings));						// Give it a title:			Window.title="Emoji Settings";		}				void Update(){			// Update HTTP services:			Http.Flush();						RefreshTimer++;						if(Status==2){				TryImportSettings();			}						if(RefreshTimer==5){				RefreshTimer=0;				Repaint();			}		}				void OnGUI(){						PowerUIEditor.HelpBox("By default to prevent bloat, Emoji images are not included in the project. "+								"Either add your own to Resources/Characters/ (e.g. 1f004.png by default), or download the Phantom Open Emoji set below.");						DownloadPath=EditorGUILayout.TextField("Save to..",DownloadPath);						if(IsDownloading){				GUILayout.Label("Downloading set.. ("+(Request.Progress*100f)+"%)",EditorStyles.boldLabel);			}else if(Status==1){				GUILayout.Label("Unpacking..",EditorStyles.boldLabel);			}else if(Status==2){				GUILayout.Label("Applying import settings..",EditorStyles.boldLabel);			}else if(Status==3){				GUILayout.Label("Import successful!",EditorStyles.boldLabel);			}else if(GUILayout.Button("Download Icons")){				DownloadIcons();			}					}				/// <summary>Attempts to apply import settings to images in icon path.</summary>		public static void TryImportSettings(){			// Grab the files in icon path:			string[] fileSet=Directory.GetFiles(IconPath);			int count=fileSet.Length;						if(count<=1){				return;			}						Status=3;						// Finally, update all images with the required import settings:			ImageImport.ApplyToAll(fileSet);		}				/// <summary>Downloads the icons now.</summary>		public static void DownloadIcons(){			if(IsDownloading){				return;			}			IsDownloading=true;						Request=new HttpRequest("http://powerui.kulestar.com/emoji/phantomOpenEmoji.unitypackage",OnGotIcons);						// Send it off:			Request.Send();		}				/// <summary>Gets the path that downloads will be saved to.</summary>		public static string IconPath{			get{				string result=DownloadPath.Replace("\\","/");				if(!result.EndsWith("/")){					result+="/";				}				return "Assets/"+result;			}		}				/// <summary>called when the icons have been downloaded.</summary>		public static void OnGotIcons(HttpRequest request){			IsDownloading=false;			Request=null;						if(request.Ok){							// Create the directory, if needed:				if(!Directory.Exists(IconPath)){					Directory.CreateDirectory(IconPath);				}								// Write out the bytes:				RemovePackage();								File.WriteAllBytes(IconPath+"phantomOpenEmoji.unitypackage",request.Bytes);				// Save the changes:				AssetDatabase.Refresh();								Status=1;				if(Window!=null){					Window.Repaint();				}								// Next, pull in the package:				AssetDatabase.ImportPackage(IconPath+"phantomOpenEmoji.unitypackage",false);								// Next, remove it:				RemovePackage();								// Make sure the database is up to date:				AssetDatabase.Refresh();				// And save all the changes:				AssetDatabase.SaveAssets();								Status=2;				if(Window!=null){					Window.Repaint();				}							}else{				Debug.LogError("HTTP Error getting "+request.Url+": "+request.Error);			}						if(Window!=null){				Window.Repaint();			}		}				/// <summary>Deletes the downloaded package if it exists.</summary>		public static void RemovePackage(){			if(File.Exists(IconPath+"phantomOpenEmoji.unitypackage")){				// It exists - delete it:				AssetDatabase.DeleteAsset(IconPath+"phantomOpenEmoji.unitypackage");				// Save the asset changes:				AssetDatabase.Refresh();			}		}			}	}