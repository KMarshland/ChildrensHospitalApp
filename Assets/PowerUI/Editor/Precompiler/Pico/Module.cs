//--------------------------------------//                Pico////        For documentation or //    if you have any issues, visit//        powerUI.kulestar.com////    Copyright © 2013 Kulestar Ltd//          www.kulestar.com//--------------------------------------using System;using System.Text;using System.Collections;using System.Collections.Generic;using System.IO;using UnityEngine;using UnityEditor;namespace Pico{		/// <summary>	/// Holds settings about a precompiled "module" - that's just a group of source files compiled together under one name.	/// </summary>		public class Module{				/// <summary>The name of the module.</summary>		public string ModuleName;		/// <summary>Was this compiled in editor mode?</summary>		private bool RawEditorMode;		/// <summary>Have the settings been loaded?</summary>		private bool SettingsLoaded;						/// <summary>Creates a settings object for a given module name.</summary>		public Module(string name){			ModuleName=name;		}				/// <summary>The path to where this precompiled module is saved.</summary>		public string Path{			get{								return Precompiler.Path+"/"+ModuleName;							}		}				/// <summary>Is there a secondary backup available? The precompiler is very conservative with files - it won't delete them unless it has to.</summary>		public bool BackupAvailable{			get{				return Directory.Exists(Path+"-Backup");			}		}				/// <summary>The path to the backed up source code.</summary>		public string SourcePath{			get{				return Path+"/Source";			}		}				/// <summary>Does this module exist?</summary>		public bool Exists{			get{				return Directory.Exists(Path);			}		}				/// <summary>Was it compiled in editor mode?</summary>		public bool EditorMode{			get{								if(!SettingsLoaded){					LoadSettings();				}								return RawEditorMode;							}		}				/// <summary>Path to the settings file.</summary>		public string SettingsPath{			get{				return Path+"/Settings.conf";			}		}				/// <summary>Loads the settings for this module.</summary>		public void LoadSettings(){						SettingsLoaded=true;						string settingsPath=SettingsPath;						if(!File.Exists(settingsPath)){				RawEditorMode=true;				return;			}						// Load the settings file:			string settings=File.ReadAllText(settingsPath);						// For now, just an easy check for Editor=True; at the start:			RawEditorMode=settings.StartsWith("Editor=True;");					}				public string DllPath{			get{				return "Assets/"+ModuleName+".dll";			}		}				public void DeleteDll(){						// Delete the .dll:			string moduleDll=DllPath;						if(File.Exists(moduleDll)){				File.Delete(moduleDll);			}					}				public SourceFileSet GetSourceFiles(){						string path=SourcePath;						// Copy All files back to their original locations. We'll use SourceFileSet again for this.			SourceFileSet set=new SourceFileSet(path);						// Add all the source files:			set.Add(path);						return set;		}				public void Backup(){						// Make this a backup set:			string path=Path;						// Rename the precompile folder so it's now just a safety backup:			if(Directory.Exists(path+"-Backup")){								// Delete an older backup.				Precompiler.DeleteDirectory(path+"-Backup");							}						File.Move(path,path+"-Backup");					}			}	}