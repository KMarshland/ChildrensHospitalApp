//--------------------------------------//               PowerUI////        For documentation or //    if you have any issues, visit//        powerUI.kulestar.com////    Copyright © 2013 Kulestar Ltd//          www.kulestar.com//--------------------------------------using System;using PowerUI;using UnityEngine;namespace PowerUI.Css{		/// <summary>	/// Used to store shading information about a particular element.	/// </summary>		public partial class ShaderData{				/// <summary>The raw flags for this shader data. Used to describe what shader features it requires.</summary>		public int Flags;		/// <summary>The cached shader to actually use.</summary>		public Shader Shader;		/// <summary>The element that this is some shading data for.</summary>		public Element Element;		/// <summary>The shader family in use. If null, the StandardUI shaders are used.</summary>		public ShaderSet Shaders;						/// <summary>Is this element lit or not?</summary>		public bool Lit{			get{				return GetFlag(1);			}			set{				SetFlag(1,value);			}		}				/// <summary>Is the given flag set?</summary>		public bool GetFlag(int flag){					return ((Flags & flag)==flag);					}				/// <summary>Set the given flag.</summary>		public void SetFlag(int flag,bool value){					if(value){				Flags|=flag;			}else{				Flags=(Flags&~flag);			}					}				/// <summary>Is the tangent block required?</summary>		public bool TangentsRequired{			get{				// Either 2 or 4 requires tangents.				return (Flags>1);			}		}				/// <summary>The isolation shader to use.</summary>		public Shader IsolatedShader{			get{								if(Shaders==null){					// Standard isolation shader will be used.					return null;				}								return Shaders.Isolated;			}		}				/// <summary>Updates the shader to use.</summary>		public void UpdateShader(){						if(Shaders==null){								// Use standard shader set.				Shader=ShaderSet.Standard.GetShader(Flags);								return;							}						// Get the shader:			Shader=Shaders.GetShader(Flags);					}				/// <summary>Checks if this shader data is no longer in use and removes it if it isn't.</summary>		public void Optimise(){						if(Shaders!=null || Flags!=0){				return;			}						Remove();					}				/// <summary>Removes this shader data from the parent element. Use Optimise to check if it requires removing.</summary>		private void Remove(){			// Remove this:			Element.Style.Computed.Shading=null;		}			}	}namespace PowerUI.Css{		public partial class ComputedStyle{				///  <summary>The shading information for this style. Stores shadow, stroke/glow, lighting and more.</summary>		public ShaderData Shading;						/// <summary>Requires a shading data block on this computed style.</summary>		public ShaderData RequireShading(){						if(Shading==null){				Shading=new ShaderData();				Shading.Element=Element;			}						return Shading;					}			}	}