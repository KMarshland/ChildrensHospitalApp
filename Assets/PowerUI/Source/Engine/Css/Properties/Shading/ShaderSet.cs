//--------------------------------------//               PowerUI////        For documentation or //    if you have any issues, visit//        powerUI.kulestar.com////    Copyright © 2013 Kulestar Ltd//          www.kulestar.com//--------------------------------------using System;using UnityEngine;using System.Collections;using System.Collections.Generic;namespace PowerUI{		/// <summary>	/// Represents a family of shaders. Globally cached to minimise memory usage.	/// </summary>		public class ShaderSet{				/// <summary>The standard shader set. Use Standard instead.</summary>		private static ShaderSet CachedStandard;		/// <summary>The cache of shader sets.</summary>		public static Dictionary<string,ShaderSet> GlobalCache;						/// <summary>The standard shader set.</summary>		public static ShaderSet Standard{			get{				if(CachedStandard==null){					CachedStandard=Get("StandardUI");				}								return CachedStandard;			}		}				/// <summary>Gets a shader set by name.</summary>		public static ShaderSet Get(string name){						ShaderSet result=null;						if(GlobalCache==null){				// Create the global cache:				GlobalCache=new Dictionary<string,ShaderSet>();			}else{								// Load from cache:				GlobalCache.TryGetValue(name,out result);							}						if(result==null){								// Create and add:				result=new ShaderSet(name);								// Push it in:				GlobalCache[name]=result;							}						return result;					}						/// <summary>The name of this shader set.</summary>		public string Name;		/// <summary>The isolated shader.</summary>		private Shader CachedIsolated;						/// <summary>Creates the shader set for the given family name.</summary>		private ShaderSet(string name){			Name=name;		}				/// <summary>Gets the isolated shader.</summary>		public Shader Isolated{			get{								if(CachedIsolated==null){					// Load it now:					CachedIsolated=Shader.Find(Name+" Isolated Unlit");				}								return CachedIsolated;			}		}				/// <summary>Gets a particular variant of this shader.</summary>		public Shader GetShader(int flags){						string name=Name;						if((flags&2)==2 || (flags&4)==4){				name+=" SFX";			}						if((flags&1)==1){				name+=" Lit";			}else{				name+=" Unlit";			}						return Shader.Find(name);					}			}	}