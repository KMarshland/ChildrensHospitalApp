//--------------------------------------//               PowerUI////        For documentation or //    if you have any issues, visit//        powerUI.kulestar.com////    Copyright © 2013 Kulestar Ltd//          www.kulestar.com//--------------------------------------using System;using UnityEngine;namespace PowerUI.Css{		/// <summary>	/// Represents the solid background colour of an element.	/// </summary>		public partial class BackgroundColour:DisplayableProperty{				/// <summary>The colour the background should be with no colour overlay.</summary>		public Color BaseColour;		/// <summary>The colour the background should be with any colour overlay applied.</summary>		public Color BackingColour;						/// <summary>Creates a new solid background colour property for the given element.</summary>		/// <param name="element">The element to give a border to.</param>		public BackgroundColour(Element element):base(element){}						public override void SetOverlayColour(Color colour){			BackingColour=BaseColour*colour;						// Only need a paint if we change the bg or overlay colour:			RequestPaint();		}				public override void Paint(){			if(FirstBlock==null){				// This can happen if an animation is requesting that a now offscreen element gets painted only.				return;			}						FirstBlock.SetColour(BackingColour);			FirstBlock.Paint();		}				protected override void Layout(){			Renderman renderer=Element.Document.Renderer;			ComputedStyle computed=Element.Style.Computed;			// Get the top left inner corner (inside margin and border):			int width=computed.PaddedWidth;			int height=computed.PaddedHeight;			int top=computed.OffsetTop+computed.BorderTop;			int left=computed.OffsetLeft+computed.BorderLeft;						// Is it clipped?			if(renderer.IsInvisible(left,top,width,height)){				// Totally not visible.				return;			}						// Ensure we have a batch (doesn't change graphics or font thus both nulls):			SetupBatch(null,null);						Add();						// Using firstblock as our block here.			// Set the UV to that of the solid block colour pixel:			FirstBlock.SetSolidColourUV();			// Set the (overlay) colour:			FirstBlock.SetColour(BackingColour);						// And finally sort out the verts:			FirstBlock.SetClipped(renderer.ClippingBoundary,new BoxRegion(left,top,width,height),renderer,computed.ZIndex-0.006f);		}			}	}