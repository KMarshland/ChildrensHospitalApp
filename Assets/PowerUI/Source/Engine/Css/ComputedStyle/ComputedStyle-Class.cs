//--------------------------------------//               PowerUI////        For documentation or //    if you have any issues, visit//        powerUI.kulestar.com////    Copyright © 2013 Kulestar Ltd//          www.kulestar.com//--------------------------------------using System;using UnityEngine;using System.Collections;using System.Collections.Generic;namespace PowerUI.Css{	/// <summary>	/// Contains methods for interacting with a CSS class applied to the computed style.	/// </summary>	public partial class ComputedStyle{						/// <summary>This is called to change a property defined by a css selector that matches the class of this element.		/// The request may be rejected if an ID selector or a style attribute on the element overrides this change.</summary>		/// <param name="cssProperty">The css property being changed.</param>		/// <param name="newValue">The new property value.</param>		public void ChangeClassProperty(string cssProperty,Css.Value newValue){						// Resolve the property:			CssProperty property=CssProperties.Get(cssProperty);						if(property==null){				return;			}						// Apply now:			ChangeClassProperty(property,newValue);					}				/// <summary>This is called to change a property defined by a css selector that matches the class of this element.		/// The request may be rejected if an ID selector or a style attribute on the element overrides this change.</summary>		/// <param name="property">The css property being changed.</param>		/// <param name="newValue">The new property value.</param>		public void ChangeClassProperty(CssProperty property,Css.Value newValue){			// Is it overriden by any ID properties?			// If so, stop.						// Grab the ID style:			Css.Value idStyle=GetIDStyle(property);						if(idStyle!=null){				if(newValue==null || !newValue.Important || idStyle.Important){					return;				}			}						// Not overriden by the ID; act like we changed a property of the ID.			ChangeIDProperty(property,newValue);		}				/// <summary>Gets the CSS property value defined by the class selector for the given property.</summary>		/// <param name="property">The CSS property to get the value for.</param>		public Css.Value GetClassStyle(CssProperty property){						if(!string.IsNullOrEmpty(ClassSelector)){				// Grab the main class style:				SelectorStyle classStyle=Element.Document.getStyleBySelector(ClassSelector);								Css.Value result;								if(classStyle!=null){					result=classStyle[property];										if(result!=null){						return result;					}				}								if(ExtraClassSelectors!=null){										for(int i=ExtraClassSelectors.Length-1;i>=0;i--){												// Grab the style:						classStyle=Element.Document.getStyleBySelector(ExtraClassSelectors[i]);												if(classStyle==null){							continue;						}												// Get the property:						result=classStyle[property];												if(result!=null){							// Got it!							return result;						}											}									}							}						return null;		}				/// <summary>Gets the CSS property value defined by the class selector for the given property.</summary>		/// <param name="property">The CSS property to get the value for.</param>		public Css.Value GetClassStyle(string property){						if(!string.IsNullOrEmpty(ClassSelector)){				// Grab the main class style:				SelectorStyle classStyle=Element.Document.getStyleBySelector(ClassSelector);								Css.Value result;								if(classStyle!=null){					result=classStyle[property];										if(result!=null){						return result;					}				}								if(ExtraClassSelectors!=null){										for(int i=ExtraClassSelectors.Length-1;i>=0;i--){												// Grab the style:						classStyle=Element.Document.getStyleBySelector(ExtraClassSelectors[i]);												if(classStyle==null){							continue;						}												// Get the property:						result=classStyle[property];												if(result!=null){							// Got it!							return result;						}											}									}							}						return null;		}			}	}