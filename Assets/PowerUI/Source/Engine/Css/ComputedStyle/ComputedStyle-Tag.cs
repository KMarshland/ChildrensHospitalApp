//--------------------------------------//               PowerUI////        For documentation or //    if you have any issues, visit//        powerUI.kulestar.com////    Copyright © 2013 Kulestar Ltd//          www.kulestar.com//--------------------------------------using System;using UnityEngine;using System.Collections;using System.Collections.Generic;namespace PowerUI.Css{	/// <summary>	/// Contains methods for interacting with a CSS class applied to the computed style.	/// </summary>	public partial class ComputedStyle{						/// <summary>This is called to change a property defined by a css selector that matches the tag of this element.		/// The request may be rejected if a class selector, ID selector or a style attribute		/// on the element overrides this change.</summary>		/// <param name="property">The css property being changed.</param>		/// <param name="newValue">The new property value.</param>		public void ChangeTagProperty(CssProperty property,Css.Value newValue){			// Is it overriden by any class properties?			// If so, stop.						// Grab the class style:			Css.Value classStyle=GetClassStyle(property);						if(classStyle!=null){				if(newValue==null || !newValue.Important || classStyle.Important){					return;				}			}						// Not overriden by the class; Act like we changed a class property.			ChangeClassProperty(property,newValue);		}				/// <summary>This is called to change a property defined by a css selector that matches the tag of this element.		/// The request may be rejected if a class selector, ID selector or a style attribute		/// on the element overrides this change.</summary>		/// <param name="cssProperty">The css property being changed.</param>		/// <param name="newValue">The new property value.</param>		public void ChangeTagProperty(string cssProperty,Css.Value newValue){						// Resolve the property:			CssProperty property=CssProperties.Get(cssProperty);						if(property==null){				return;			}						// Apply now:			ChangeTagProperty(property,newValue);					}			}	}