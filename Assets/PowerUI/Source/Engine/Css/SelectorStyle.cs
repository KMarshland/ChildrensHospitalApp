//--------------------------------------//               PowerUI////        For documentation or //    if you have any issues, visit//        powerUI.kulestar.com////    Copyright © 2013 Kulestar Ltd//          www.kulestar.com//--------------------------------------using System;using System.Collections;using System.Collections.Generic;namespace PowerUI.Css{		/// <summary>	/// Holds a block of css properties for a given selector (e.g. .name and #name are selectors).	/// </summary>		public class SelectorStyle:Style{				/// <summary>The sheet this style belongs to.</summary>		public StyleSheet Sheet;		/// <summary>This may be a 'something:hover' selector, in which case the modifier is 'hover'. Null otherwise.</summary>		public string Modifier;		/// <summary>The full selector, e.g. 'something:hover'.</summary>		public string Selector;		/// <summary>The document that this selector style belongs to.</summary>		public Document Document;		/// <summary>The full selector without the modifier. If the full selector is 'div:hover', this is just 'div'.</summary>		public string BaseSelector;						/// <summary>Creates a new selector style containing the given css property string.</summary>		/// <param name="sheet">The stylesheet this style belongs to.</param>		/// <param name="selector">The selector that defines which elements the properties will affect.</param>		/// <param name="modifier">The :modifier for this selector.</param>		public SelectorStyle(StyleSheet sheet,string selector,string modifier):base(){			Sheet=sheet;			Document=sheet.Document;			BaseSelector=selector;						if(string.IsNullOrEmpty(modifier)){				Selector=selector;			}else{				Modifier=modifier;				Selector=selector+":"+modifier;			}					}				/// <summary>Called when somebody dynamically updates a stylesheet. Currently does nothing.</summary>		public override void OnChanged(CssProperty property,Value newValue){			// Would need to find all elements that this css selector affects and call RecomputeRequired on them.		}				/// <summary>Gets the type of element that this selector affects.</summary>		public Css.SelectorType SelectorType{			get{								Css.SelectorType type=Css.SelectorType.Tag;								if(Selector.Length>0){					char first=Selector[0];										if(first=='.'){						type=Css.SelectorType.Class;					}else if(first=='#'){						type=Css.SelectorType.ID;					}								}								return type;			}		}				/// <summary>Does this selector have a :modifier or not?</summary>		public bool Unmodified{			get{				return (Modifier==null);			}		}				public void BakeToModifiers(){						// Does it have any modified selectors? If so, add these properties in there too 			// (as the modified form 'derives' from this) but weakly - don't override them.			// This occurs if :aModified is defined before the unmodified selector.			List<Css.SelectorStyle> modifiedForms=Sheet.GetModifiers(Selector);							if(modifiedForms!=null){				// Great, it's got some! Copy this style over now:				for(int i=modifiedForms.Count-1;i>=0;i--){					SelectorStyle modifiedForm=modifiedForms[i];					CopyTo(modifiedForm,false);				}			}						if(Document!=null && Document.html!=null && Unmodified){				// Is this selector already in use?				Css.SelectorType type=SelectorType;								// Next, recurse through the DOM looking for it:				Document.html.RefreshSelector(type,BaseSelector);			}					}				/// <summary>Copies this objects properties to the other given style, overwriting existing properties if told to do so.</summary>		/// <param name="otherStyle">The style to copy this objects properties into.</param>		/// <param name="overwrite">True if existing properties should be overwriten.</param>		public void CopyTo(SelectorStyle otherStyle,bool overwrite){			if(otherStyle==null){				return;			}						foreach(KeyValuePair<CssProperty,Value> kvp in Properties){				if(!overwrite && otherStyle.Properties.ContainsKey(kvp.Key)){					continue;				}								otherStyle[kvp.Key]=kvp.Value.Copy();			}					}				/// <summary>Converts this selector to a css formatted string.</summary>		public override string ToString(){			string result=Selector+"{";						foreach(KeyValuePair<CssProperty,Value> kvp in Properties){				result+="\n\t"+kvp.Key.Name+":"+kvp.Value+";";			}						return result+"\n}";		}			}	}