//--------------------------------------//             InfiniText////        For documentation or //    if you have any issues, visit//        powerUI.kulestar.com////    Copyright © 2013 Kulestar Ltd//          www.kulestar.com//--------------------------------------using System;using System.IO;namespace InfiniText{	public class FontParser{				// Offsets to various important tables:		public int GlyfOffset=0;		public int LocaOffset=0;		public int CffOffset=0;		public int HmtxOffset=0;		public int KernOffset=0;		public int GposOffset=0;		public int GlyphCount=0;		public int CmapOffset=0;		public int PostOffset=0;		public int HheaOffset=0;		/// <summary>True if the OS2 table exists.</summary>		public bool ReadOS2;		public int IndexToLocFormat=0;				public byte[] Data;		public int Position;						public FontParser(byte[] data){						Data=data;					}				public byte ReadByte(){						return Data[Position++];					}				public int ReadOffset(int offSize){					uint v=0;						for(int i=0;i<offSize;i++){				// Shift 8 places:				v=(v<<8);								// Append the next byte:				v|=ReadByte();			}						return (int)v;				}				public short ReadInt16(){						return (short)((Data[Position++] << 8) | Data[Position++]);					}				public ushort ReadUInt16(){						return (ushort)((Data[Position++] << 8) | Data[Position++]);					}				public ushort ReadUInt16(ref int index){						ushort result=(ushort)((Data[index] << 8) | Data[index+1]);						index+=2;						return result;		}				public short ReadInt16(ref int index){						short result=(short)((Data[index] << 8) | Data[index+1]);						index+=2;						return result;		}				public int ReadInt32(){						return (int)((Data[Position++] << 24) | (Data[Position++] << 16) | (Data[Position++] << 8) | Data[Position++]);					}				public uint ReadUInt32(){						return (uint)((Data[Position++] << 24) | (Data[Position++] << 16) | (Data[Position++] << 8) | Data[Position++]);					}				public float ReadRevision(){						int dec=ReadInt16();			int frac=ReadInt16();						return ((float)dec + (float)frac/10f);					}				public float ReadVersion(){						int major = ReadUInt16();			int minor = ReadUInt16();						return major + minor / 0x1000f / 10f;					}				public ulong ReadTime(){						Position+=8;			return 0;					}				public string ReadString(int length){						char[] result=new char[length];						for(int i=0;i<length;i++){								result[i]=(char)Data[Position++];							}						return new string(result);					}				public string ReadTag(){						return ReadString(4);					}				public float ReadF2Dot14(){						return (float) ReadInt16() / 16384f;					}				public int ReadFixed(out int frac){						int dec=ReadInt16();			frac=ReadInt16();						return dec;					}			}}