//--------------------------------------//          Wrench Framework////        For documentation or //    if you have any issues, visit//         wrench.kulestar.com////    Copyright © 2013 Kulestar Ltd//          www.kulestar.com//--------------------------------------namespace Wrench{		/// <summary>	/// Handles a variable tag within a language file.	/// Variable tags define what a &variable; should be replaced with and essentially seperate	/// layout or structure from the language.	/// </summary>		public class VariableTag:LanguageTagHandler{				public override string[] GetTags(){			return new string[]{"var","v"};		}				public override TagHandler GetInstance(){			return new VariableTag();		}				/// <summary>The gender defined on this variable, if any.</summary>		public string Gender;		/// <summary>The parent language that this variable belongs to.</summary>		public LanguageSet Parent;		/// <summary>The parsed variable element.</summary>		public LanguageElement Element;				public override bool OnAttributeChange(string property){			if(base.OnAttributeChange(property)){				return true;			}			if(property=="gender"){				Gender=Element["gender"].Trim().ToLower();			}			return false;		}				public override void OnParseContent(MLLexer lexer){			// Read the content as a string until we hit </var>			string variableText="";			while(!AtEnd(lexer)){				variableText+=lexer.Read();			}			string name=Element["name"];			if(name==null){				return;			}						if(Gender=="boy"||Gender=="male"){				name+=" gender:b";			}else if(Gender=="girl"||Gender=="female"){				name+=" gender:g";			}			Parent.SetValue(name,variableText);		}				/// <summary>Checks if the given lexer is at the end of the variable tag currently being parsed.</summary>		/// <param name="lexer">The lexer to check.</param>		/// <returns>True if the lexer is now at the end of the variable tags content; false otherwise.</returns>		private bool AtEnd(MLLexer lexer){			if(lexer.Peek()=='<' && lexer.Peek(1)=='/' && lexer.Peek(2)=='v'){				if(lexer.Peek(3)=='>' || (lexer.Peek(3)=='a' && lexer.Peek(4)=='r') ){					return true;				}			}			return false;		}	}	}