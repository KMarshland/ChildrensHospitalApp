#if !NETFX_CORE//--------------------------------------//         Nitro Script Engine//          Wrench Framework////        For documentation or //    if you have any issues, visit//         nitro.kulestar.com////    Copyright © 2013 Kulestar Ltd//          www.kulestar.com//--------------------------------------using System;using System.Collections;using System.Collections.Generic;namespace Nitro{	/// <summary>	/// Stores a map of aliases to system types.	/// E.g. int to System.Int32.	/// </summary>	public static class TypeAliases{				/// <summary>The global lookup map of alias to type.</summary>		private static Dictionary<string,Type> AliasMap=new Dictionary<string,Type>();						/// <summary>Adds an alias to the global map.</summary>		/// <param name="alias">The alias string to use.</param>		/// <param name="forType">The system type it maps to.</param>		public static void Add(string alias,Type forType){			if(alias==null || forType==null){				return;			}						// Lowercase the alias:			alias=alias.ToLower();						// Next up, is the type a generic one?			if(forType.IsGenericType && !alias.Contains("`")){				// It's generic all right!								// We need to add in a backtick and also the number of params:				alias+="`"+Wrench.TypeData.GenericArguments(forType).Length;			}						AliasMap[alias]=forType;		}				/// <summary>Finds the system type for a given alias.</summary>		/// <param name="alias">The alias to look for.</param>		/// <returns>The system type, if found.</returns>		public static Type Find(string alias){			Type result;			AliasMap.TryGetValue(alias,out result);			return result;		}				/// <summary>Called when the system is starting to setup the default alias set.</summary>		public static void Setup(){			Add("void",typeof(Void));			Add("object",typeof(object));						Add("float",typeof(float));			Add("double",typeof(double));						Add("short",typeof(short));			Add("ushort",typeof(ushort));			Add("int",typeof(int));			Add("uint",typeof(uint));			Add("long",typeof(long));			Add("ulong",typeof(ulong));						Add("boolean",typeof(bool));			Add("bool",typeof(bool));						Add("char",typeof(char));			Add("string",typeof(string));						Add("math",typeof(System.Math));						Add("decimal",typeof(decimal));						Add("byte",typeof(byte));			Add("sbyte",typeof(sbyte));						Add("method",typeof(DynamicMethod<>));						Add("type",typeof(System.Type));			Add("date",typeof(DateTime));		}			}	}#endif