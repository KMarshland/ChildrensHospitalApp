//--------------------------------------//          Wrench Framework////        For documentation or //    if you have any issues, visit//         wrench.kulestar.com////    Copyright © 2013 Kulestar Ltd//          www.kulestar.com//--------------------------------------using System.Collections;using System.Collections.Generic;namespace Wrench{		/// <summary>	/// Used by OnGroupResolve to resolve a group name from a variable if it's not found in ExtraGroups.	/// </summary>	/// <param name="pieces">The variable name split by '.'</param>	/// <returns>The resolved string.</returns>	public delegate string GroupResolve(string[] pieces,string fullText);		/// <summary>	/// A set of variables for a particular language. Used for localization.	/// </summary>		public class LanguageSet:VariableSet{			/// <summary>The name of the language.</summary>		public string Name;		/// <summary>The language code, e.g. "en". Always lowercase.</summary>		public string Code;		/// <summary>A group, if any. This will either come from the language tag or be provided in a constructor.		/// It gets appended to all variable names in the set and defines a set of variables, such as all those found on the login page.		/// Grouped variables let you break it down into multiple files. They are accessed with &groupname.varname;</summary>		public string Group;		/// <summary>True if this language goes from right to left (e.g. arabic).</summary>		public bool GoesLeftwards;		/// <summary>The language loader (if any) used to load this set.</summary>		public LanguageLoader Loader;		/// <summary>A delegate called when a group gets resolved from a variable but isn't found in ExtraGroups.</summary>		public GroupResolve OnGroupResolve;		/// <summary>A set of additional groups.</summary>		public Dictionary<string,LanguageSet> ExtraGroups;				/// <summary>Creates a new empty language set.</summary>		public LanguageSet(){}						/// <summary>Creates a new language set, loading its content from the given xml string.</summary>		/// <param name="content">An xml formatted string of all the variables in this language.</param>		/// <param name="loader">The optional loader which loaded this set.</param>		/// <param name="group">A group that these language variables belong to.</param>		public LanguageSet(string content,LanguageLoader loader):this(content,""){			Loader=loader;		}				/// <summary>Creates a new language set, loading its content from the given xml string.</summary>		/// <param name="content">An xml formatted string of all the variables in this language.</param>		/// <param name="group">A group that these language variables belong to.</param>		public LanguageSet(string content):this(content,""){}				/// <summary>Creates a new language set, loading its content from the given xml string.</summary>		/// <param name="content">An xml formatted string of all the variables in this language.</param>		/// <param name="group">A group that these language variables belong to.</param>		public LanguageSet(string content,string group){			if(group!=""){				Group=group;			}						SetContent(content);		}				/// <summary>Sets the content of this language from a given xml string.</summary>		/// <param name="content">An xml formatted string of all the variables in this language.</param>		public void SetContent(string content){			if(content==null){				return;			}						// Parse content into our set of tags.			// Look out for the <language> tag which provides our Name and Code.			// Everything else should be <var> tags which must not fully parse the tree of their content.			MLLexer lexer=new MLLexer(content);						// Read the content into an element, which in turn will pass all its vars back up here.			new LanguageElement(this,lexer);		}				/// <summary>Does this set contain the named group?</summary>		/// <returns>True if it does; false otherwise.</returns>		public bool ContainsGroup(string group){			if(ExtraGroups==null){				return false;			}			return ExtraGroups.ContainsKey(group);		}				/// <summary>Loads the group with the given name using this sets loader, if there is one.</summary>		public LanguageSet LoadGroup(string groupName){			if(Loader==null){				return null;			}						// Load the set:			LanguageSet set=Loader.GetGroup(groupName,Code);						if(set!=null){				// Apply the group name:				set.Group=groupName;								// Add it:				AddGroup(set);			}						return set;		}				/// <summary>Adds the group from the given text. This allows loading new language variables at runtime.</summary>		/// <param name="content">The xml structured variables.</param>		public LanguageSet AddGroup(string content){			return AddGroup(content,null);		}				/// <summary>Adds the group from the given text. This allows loading new language variables at runtime.</summary>		/// <param name="content">The xml structured variables.</param>		/// <param name="group">The name of the group.</param>		public LanguageSet AddGroup(string content,string group){			LanguageSet extraSet=new LanguageSet(content,group);			extraSet.Loader=Loader;			AddGroup(extraSet);			return extraSet;		}				/// <summary>Adds the given group to this set. This allows loading new language variables at runtime.</summary>		/// <param name="group">The group to add.</param>		public void AddGroup(LanguageSet group){			if(group==null){				return;			}						if(ExtraGroups==null){				ExtraGroups=new Dictionary<string,LanguageSet>();			}						string groupName=group.Group;						if(groupName==null){				groupName="";			}						ExtraGroups[groupName]=group;		}				/// <summary>Removes a group from this language.</summary>		/// <param name="group">The name of the group to remove.</param>		public void RemoveGroup(string group){			if(ExtraGroups.Count==1){				ExtraGroups=null;				return;			}						ExtraGroups.Remove(group);		}				public override string GetValue(string code){						if(ExtraGroups!=null){				// Are we loading from a group?				int lastIndex=code.LastIndexOf('.');								if(lastIndex!=-1){										// Loading from a group.										// Get the name up to (but not including) the last dot:					string groupName=code.Substring(0,lastIndex);										LanguageSet group;										if(!ExtraGroups.TryGetValue(groupName,out group)){						// Didn't find the group. Got a custom handler for this group?												if(OnGroupResolve!=null){							// Get all the pieces:							string[] pieces=code.Split('.');														// Resolve it:							return OnGroupResolve(pieces,code);						}else{							// Attempt to load a standard group.							group=LoadGroup(groupName);														if(group==null){								return base.GetValue(code);							}						}											}										return group.GetValue(code.Substring(groupName.Length+1));				}							}						return base.GetValue(code);		}			}	}